// 1. GRID CONTAINER

// 1.1. GRID-TEMPLATE-COLUMNS / GRID-TEMPLATE-ROWS / GRID-AREA

.grid {
    display: grid;
    background-color: bisque;
    width: 100%;
    height: 500px;
    grid-template-columns: 40% 40% 20%;  //defines number and width of each column
    grid-template-rows: 40% 40% ;  //defines number and height of each row 
    grid-template: 40% 40% / 40% 40% 20% //Shorthand for template-rows and template-columns in that order
}
    // 1.1.1 Fraction - define the size of columns and rows as a fraction of the gridâ€™s length and width.
.grid {
    display: grid;
    width: 1000px;
    height: 400px;
    grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr; // 3 rows of 200px, 100px, 100px - 3c columns 200px, 600px, 200px
}

    // 1.1.2  Repeat - will duplicate the specifications for rows or columns a given number of times
.grid {
    display: grid;
    width: 300px;
    grid-template-columns: repeat(3, 1fr); //Split the grid into 3 equal columns
    grid-template-columns: repeat(2, 20px 50px); // creaate 4 columns, 1st & 3rd 20px - 2nd & 4th 50px
    grid-template: repeat(3, 1fr) / 3fr 50% 1fr; //3rows 1fr each and 3 columns 
}

    //  1.1.3 minmax - prevent a row or column from getting too big or too small - if used, width has to be deleted from grid. 
.grid {
    display: grid;
    grid-template-columns: 100px minmax(100px, 500px) 100px; // 1st and 3rd columns 100px wide. 2nd column will be between 100 and 500px wide
    grid-template: repeat(3, 1fr) / 3fr minmax(50px, 300px) 1fr; // 3 rows equal size - 3 columns different sizes
}

    //  1.1.4 grid gap - shorthand row-gap and column-gap will put blank space between every row and column in the grid.
.grid {
    display: grid;
    width: 320px;
    height: 600px;
    grid-template: repeat(3, 1fr) / repeat(3,1fr);
    gap: 20px 10px;  //distance between rows to 20px and the distance between columns to 10px. If only 1 value given, column gap and row gap to that value.
}


//  1.2  GRID-TEMPLATE-AREAS -  allows to name sections of the page to use as values in the grid-row-start, grid-row-end, grid-column-start,grid-column-end, and grid-area properties
.container {
    display: grid;
    max-width: 900px;
    position: relative;
    margin: auto;
    grid-template-areas:"head head"
                        "nav nav" 
                        "info services"
                        "footer footer";
    grid-template-rows: 300px 120px 800px 120px;
    grid-template-columns: 1fr 3fr; 
}
header {
    grid-area: head;
} 
nav {
    grid-area: nav;
} 
.info {
    grid-area: info;
} 
.services {
    grid-area: services;
}
footer {
    grid-area: footer;
} 


// 1.3 JUSTIFY-ITEMS -  position elements within their columns from left to right - declared on containers
main {
    display: grid;
    grid-template-columns: repeat(3, 400px);  // grid with 3 columns 400px each 
    justify-items: center;  // items will be centered inside of their columns. 
    justify-items: start; //  aligns grid items to the left side of the grid area
    justify-items: end; //  aligns grid items to the right side of the grid
    justify-items: stretch; //  stretches all items to fill the grid area
}
// notes: If item's witdh is not set and justify-items isn't set, the items will span the width of the column. (400px) 


// 1.4 JUSTIFY-CONTENT  -  position the columns within the grid. position the entire grid along the row axis - declared on containers 

.container {
    display: grid;
    width: 1000px;   //creates a 1000px wide grid
    grid-template-columns: 300px 300px; // creates 2 columns total width: 600px, left space: 400px
    justify-content: center;   // positions the columns in the center of the grid, leaving 200px on the right and 200px on the left of the grid
    justify-content: end;  //   aligns the columns to the right side of the grid container
    justify-content: start; //  aligns the columns to the left side of the grid container
    justify-content: stretch;  //   stretches the grid columns to increase the size of the grid to expand horizontally across the container
    justify-content: space-around;  //  includes an equal amount of space on each side of a grid columns
    justify-content: space-between;  //  includes an equal amount of space between grid columns and no space at either end
    justify-content: space-evenly;  //  places an even amount of space between grid items and at either end
} 


//  1.5 ALLIGN-ITEMS -  positions items from top to bottom within their rows. declared on grid containers.
main {
    display: grid;
    grid-template-rows: repeat(3, 400px);  // creates a grid wit 3 rows 400px each
    align-items: center;   //  item will be centered vertically inside of their rows. They will only be as tall as necessary
}
// notes: If item's height is not set and justify-items isn't set, the items will span the height of the row. (400px) 



//  1.6 ALLIGN-CONTENT



// 2. GRID ITEMS

// multiple row and column items - single grid items take up multiple rows or columns. 

.item {
    grid-row-start: 1; //item will take rows 1 and 2 
    grid-row-end: 3;
    grid-column-start: 4; //item will take columns 4 and 5
    grid-column-end: 6;
}

.item {
    grid-row: 1 / 3;  //shorthand for row-start and row-end
    grid-column: 4 / span 2;  //span keyword allows to start or end a column or row, relative to its other end.
}

// Grid Area - This property will set the starting and ending positions for both the rows and columns of an item.

.item {
    grid-area: 2 / 3 / 4 / span 5;  //grid-row-start / grid-column-start / grid-row-end / grid-column-end
}