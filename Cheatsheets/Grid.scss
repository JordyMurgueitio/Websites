// 1. GRID CONTAINER

.grid {
    display: grid;
    background-color: bisque;
    width: 100%;
    height: 500px;
    grid-template-columns: 40% 40% 20%;  //defines number and width of each column
    grid-template-rows: 40% 40% ;  //defines number and height of each row 
    grid-template: 40% 40% / 40% 40% 20% //Shorthand for template-rows and template-columns in that order
}

// Fraction - define the size of columns and rows as a fraction of the gridâ€™s length and width.

.grid {
    display: grid;
    width: 1000px;
    height: 400px;
    grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr; // 3 rows of 200px, 100px, 100px - 3c columns 200px, 600px, 200px
}

// Repeat - will duplicate the specifications for rows or columns a given number of times

.grid {
    display: grid;
    width: 300px;
    grid-template-columns: repeat(3, 1fr); //Split the grid into 3 equal columns
    grid-template-columns: repeat(2, 20px 50px); // creaate 4 columns, 1st & 3rd 20px - 2nd & 4th 50px
    grid-template: repeat(3, 1fr) / 3fr 50% 1fr; //3rows 1fr each and 3 columns 
}

// minmax - prevent a row or column from getting too big or too small - if used, width has to be deleted from grid. 

.grid {
    display: grid;
    grid-template-columns: 100px minmax(100px, 500px) 100px; // 1st and 3rd columns 100px wide. 2nd column will be between 100 and 500px wide
    grid-template: repeat(3, 1fr) / 3fr minmax(50px, 300px) 1fr; // 3 rows equal size - 3 columns different sizes
}

// grid gap - shorthand row-gap and column-gap will put blank space between every row and column in the grid.

.grid {
    display: grid;
    width: 320px;
    height: 600px;
    grid-template: repeat(3, 1fr) / repeat(3,1fr);
    gap: 20px 10px;  //distance between rows to 20px and the distance between columns to 10px. If only 1 value given, column gap and row gap to that value.
}




// 2. GRID ITEMS

// multiple row and column items - single grid items take up multiple rows or columns. 

.item {
    grid-row-start: 1; //item will take rows 1 and 2 
    grid-row-end: 3;
    grid-column-start: 4; //item will take columns 4 and 5
    grid-column-end: 6;
}

.item {
    grid-row: 1 / 3;  //shorthand for row-start and row-end
    grid-column: 4 / span 2;  //span keyword allows to start or end a column or row, relative to its other end.
}

// Grid Area - This property will set the starting and ending positions for both the rows and columns of an item.

.item {
    grid-area: 2 / 3 / 4 / span 5;  //grid-row-start / grid-column-start / grid-row-end / grid-column-end
}